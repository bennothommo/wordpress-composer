#!/usr/bin/env php
<?php
if (php_sapi_name() !== 'cli') {
    echo "\nThis script may only be run from command line.\n";
    exit(1);
}

process(is_array($argv) ? $argv : array());

function process($argv)
{
    // Determine ANSI output from --ansi and --no-ansi flags
    setUseAnsi($argv);

    if (in_array('--help', $argv)) {
        displayHelp();
        exit(0);
    }

    $command = $argv[1] ?? null;

    if (empty($command)) {
        displayHelp();
        exit(0);
    } else {
        if (function_exists('command' . ucfirst($command))) {
            ('command' . ucfirst($command))();
        }
    }
}

/**
 * Sets the USE_ANSI define for colorizing output
 *
 * @param array $argv Command-line arguments
 */
function setUseAnsi($argv)
{
    // --no-ansi wins over --ansi
    if (in_array('--no-ansi', $argv)) {
        define('USE_ANSI', false);
    } elseif (in_array('--ansi', $argv)) {
        define('USE_ANSI', true);
    } else {
        // On Windows, default to no ANSI, except in ANSICON and ConEmu.
        // Everywhere else, default to ANSI if stdout is a terminal.
        define(
            'USE_ANSI',
            (DIRECTORY_SEPARATOR == '\\')
                ? (false !== getenv('ANSICON') || 'ON' === getenv('ConEmuANSI'))
                : (function_exists('posix_isatty') && posix_isatty(1))
        );
    }
}


/**
 * displays the help
 */
function displayHelp()
{
    echo <<<EOF
Wordpress Composer Bootstrapper CLI

Usage: php cli.php <command>
-----------------------------------
Commands
  keys               generates new keys in the `.env` file.
  install            installs WordPress immediately.

Options
--help               this help.
EOF;
}

function commandKeys()
{
    if (!file_exists(__DIR__ . '/.env')) {
        @copy(__DIR__ . '/.env.example', __DIR__ . '/.env');
    }

    $content = @file_get_contents(__DIR__ . '/.env');
    if (empty($content)) {
        echo "\nUnable to read .env file.\n";
        exit(1);
    }

    foreach ([
        'AUTH_KEY',
        'SECURE_AUTH_KEY',
        'LOGGED_IN_KEY',
        'NONCE_KEY',
        'AUTH_SALT',
        'SECURE_AUTH_SALT',
        'LOGGED_IN_SALT',
        'NONCE_SALT'
    ] as $key)
    {
        $generated = generateKey();

        if (!preg_match('/^([ \t]*' . $key . '\s*=\s*)([^\n\r]*)$/m', $content)) {
            // Append to content
            $content .= "\n{$key} = '{$generated}'";
        } else {
            $content = preg_replace_callback('/^([ \t]*' . $key . '[ \t]*=[ \t]*)([^\n\r]*)/m', function ($matches) use ($generated) {
                return trim($matches[1]) . " '{$generated}'";
            }, $content, 1);
        }
    }

    @file_put_contents(__DIR__ . '/.env', $content);
    echo "\nEncryption keys generated in .env.\n";
    exit(0);
}

function generateKey()
{
    $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789~!@#$%^&*()-_=+{}[]:;<,>.?';
    $length = strlen($characters);

    $string = '';
    while (strlen($string) < 48) {
        $string .= substr($characters, random_int(0, $length - 1), 1);
    }

    return $string;
}

function commandInstall()
{
    // Not implemented yet
}
